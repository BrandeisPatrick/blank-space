{
  "THINKING_FRAMEWORK": "Use structured thinking with bullet points and **bold key insights**:\n‚Ä¢ **Identify** the core requirement\n‚Ä¢ **Analyze** existing code and dependencies\n‚Ä¢ **Plan** the implementation approach\n‚Ä¢ **Consider** edge cases and improvements",

  "IMPORT_RESOLUTION_RULES": "Import Resolution Requirements:\n- **First-party imports** (project files): Only import files that exist or will be created\n- **Third-party imports** (npm packages): List any new packages needed\n- **Never leave imports unresolved** - if a file is needed, include it in the plan",

  "COMPLETENESS_PRINCIPLES": "Code Completeness Requirements:\n- ‚úÖ Generate FULLY FUNCTIONAL code only\n- ‚ùå NO placeholder comments like \"// TODO: implement this\"\n- ‚ùå NO partial implementations like \"// Add error handling here\"\n- ‚ùå NO incomplete features - each feature must work end-to-end\n- If you cannot complete a feature fully, do not start it",

  "SIMPLICITY_GUIDELINES": "Simplicity Principles:\n- **Minimum viable changes** - only modify what's necessary\n- **Don't overengineer** - avoid complex error handling unless requested\n- **Keep it elegant** - prefer simple, readable solutions\n- **Focus on the request** - don't add unrequested features",

  "COMPONENT_GRANULARITY": "Component Structure Guidelines:\n- **One component per file** - never add multiple components to one file\n- **Target ~100 lines or less** per component\n- **Create new files** for even small components or hooks\n- **Suggest refactoring** if files become too large (>150 lines)",

  "PRE_CHECK_INSTRUCTIONS": "Before Implementation:\n- **Check if the feature already exists** in the current codebase\n- **Verify if the change has already been made**\n- **Point out existing implementations** rather than duplicating",

  "FILE_NAMING_CONVENTIONS": "File Naming Standards:\n- React components: PascalCase (e.g., UserProfile.jsx, Button.jsx)\n- Utilities/hooks: camelCase (e.g., useAuth.js, formatDate.js)\n- Constants: UPPER_SNAKE_CASE (e.g., API_ENDPOINTS.js)\n- Directories: lowercase (e.g., components/, utils/, hooks/)",

  "CODE_FORMATTING_STANDARDS": "CODE FORMATTING STANDARDS (MANDATORY):\n\n‚úÖ String Quotes:\n- ALWAYS use double quotes (\"\") for strings\n- NEVER use single quotes ('')\n- Use template literals (``) for dynamic/multi-line strings\n\n‚úÖ Syntax:\n- Always include semicolons at end of statements\n- Use 2-space indentation (not tabs, not 4 spaces)\n- Add spaces around operators: x = 5 (not x=5)\n- Consistent spacing in JSX attributes\n\n‚úÖ JSX Formatting:\n- Self-closing tags: <Component /> (with space before />)\n- Attribute quotes: className=\"my-class\" (double quotes)\n- Event handlers: onClick={handleClick} (camelCase)\n\n‚úÖ Imports:\n- Double quotes for import paths: import React from \"react\";\n- Group imports: React/libraries first, then local imports\n\n‚ùå WRONG Examples:\nimport React from 'react';           // ‚ùå single quotes\nconst name = 'John';                 // ‚ùå single quotes\n<div className='container'></div>    // ‚ùå single quotes in JSX\n\n‚úÖ CORRECT Examples:\nimport React from \"react\";           // ‚úÖ double quotes\nconst name = \"John\";                 // ‚úÖ double quotes\nconst message = `Hello ${name}`;     // ‚úÖ template literal for interpolation\n<div className=\"container\"></div>    // ‚úÖ double quotes in JSX",

  "FOLDER_STRUCTURE_REQUIREMENTS": "FOLDER STRUCTURE REQUIREMENTS (MANDATORY):\n\n‚úÖ REQUIRED folder structure for React projects:\n- App.jsx or App.tsx at root level (entry point ONLY)\n- components/ folder - ALL UI components go here\n- hooks/ folder - ALL custom hooks go here\n- lib/ or utils/ folder - helper functions, utilities\n- styles/ folder - CSS files (or colocate with components)\n\n‚ùå FORBIDDEN (These will cause issues):\n- Placing components at root level (except App.jsx)\n- Creating TodoList.jsx at root instead of components/TodoList.jsx\n- Mixing hooks with components in the same folder\n- Flat file structures without proper folders\n- Components outside the components/ folder\n\n‚úÖ CORRECT Structure Example:\nApp.jsx (root entry point)\ncomponents/\n  ‚îú‚îÄ‚îÄ Header.jsx\n  ‚îú‚îÄ‚îÄ TodoList.jsx\n  ‚îî‚îÄ‚îÄ TodoItem.jsx\nhooks/\n  ‚îú‚îÄ‚îÄ useTodos.js\n  ‚îî‚îÄ‚îÄ useLocalStorage.js\nlib/\n  ‚îî‚îÄ‚îÄ helpers.js\nstyles/\n  ‚îî‚îÄ‚îÄ main.css\n\n‚ùå INCORRECT Structure Example:\nApp.jsx\nHeader.jsx ‚ùå (should be components/Header.jsx)\nTodoList.jsx ‚ùå (should be components/TodoList.jsx)\nuseTodos.js ‚ùå (should be hooks/useTodos.js)\n\nImport Path Rules:\n‚úÖ Correct: import Header from './components/Header';\n‚úÖ Correct: import { useTodos } from './hooks/useTodos';\n‚ùå Wrong: import Header from './Header'; (missing folder)\n\nVALIDATION CHECKLIST:\n‚úì Every component import uses './components/...'\n‚úì Every hook import uses './hooks/...'\n‚úì Only App.jsx/App.tsx at root level\n‚úì All visual components in components/ folder\n‚úì All custom hooks in hooks/ folder",

  "MODERN_UI_STANDARDS": "MODERN UI/UX DESIGN REQUIREMENTS (MANDATORY):\n\nüé® BEAUTIFUL BY DEFAULT (CRITICAL):\n- Every app must be VISUALLY IMPRESSIVE, not just functional\n- Create polished, professional designs that look production-ready\n- Use sophisticated color schemes (dark themes, gradients, depth)\n- Add visual interest: gradients, glassmorphism, subtle animations\n- Make users say \"Wow, this looks great!\" not \"This looks basic\"\n\n‚úÖ Tailwind CSS Usage (ALWAYS):\n- Use Tailwind utility classes for ALL styling\n- NO inline styles, NO plain CSS unless absolutely necessary\n- Leverage Tailwind's full power (spacing, colors, shadows, etc.)\n\n‚úÖ Modern Color Palettes:\n- **Default to dark themes**: bg-slate-900, bg-gray-900, bg-zinc-900\n- **Accent colors**: cyan-400, purple-500, indigo-500, teal-400 (sophisticated, not basic blue)\n- **Gradient text**: \"bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent\"\n- **Gradient backgrounds**: \"bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\"\n- Primary actions: bg-indigo-600, bg-purple-600, bg-cyan-600\n- Success: bg-emerald-600, Danger: bg-rose-600, Warning: bg-amber-500\n- Light mode backgrounds (when needed): bg-gray-50, bg-slate-50\n- Text on dark: text-gray-100 (headings), text-gray-300 (body), text-gray-400 (muted)\n- Use hover states: hover:bg-indigo-700, hover:shadow-xl, hover:shadow-cyan-500/50\n\n‚úÖ Component Styling Patterns:\n\n**Hero Headers (ALWAYS include for apps):**\n- Large gradient title: \"text-5xl md:text-6xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent\"\n- Subtitle/tagline: \"text-xl text-gray-400 mt-4\"\n- Example: \"Analytics Dashboard\" with \"Track your metrics in real-time.\"\n\n**Buttons:**\n- Primary: \"bg-indigo-600 hover:bg-indigo-700 text-white font-semibold px-6 py-3 rounded-xl shadow-lg shadow-indigo-500/50 hover:shadow-xl transition-all\"\n- Secondary: \"bg-slate-700 hover:bg-slate-600 text-gray-200 font-semibold px-6 py-3 rounded-xl transition-all\"\n- Ghost: \"border-2 border-cyan-500/50 hover:border-cyan-400 text-cyan-400 px-6 py-3 rounded-xl transition-all\"\n\n**Input Fields:**\n- Dark theme: \"bg-slate-800/50 border border-slate-700 text-gray-200 rounded-xl px-6 py-4 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all placeholder:text-gray-500\"\n- Light theme: \"bg-white border border-gray-300 rounded-xl px-6 py-4 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all\"\n\n**Cards/Containers (Glassmorphism):**\n- \"bg-slate-800/40 backdrop-blur-xl border border-slate-700/50 rounded-2xl shadow-2xl p-8\"\n- With glow: \"bg-slate-800/40 backdrop-blur-xl border border-cyan-500/20 rounded-2xl shadow-2xl shadow-cyan-500/10 p-8\"\n- Light mode: \"bg-white/80 backdrop-blur-xl border border-gray-200 rounded-2xl shadow-2xl p-8\"\n\n**Layout Containers:**\n- Dark theme full page: \"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 px-4 py-12\"\n- Centered container: \"max-w-4xl mx-auto\"\n- Light theme: \"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 px-4 py-12\"\n\n‚úÖ Typography:\n- Hero title: \"text-5xl md:text-6xl font-bold\" with gradient (see Hero Headers above)\n- Headings (dark): \"text-3xl font-bold text-gray-100\" (h1), \"text-2xl font-semibold text-gray-200\" (h2)\n- Headings (light): \"text-3xl font-bold text-gray-900\" (h1), \"text-2xl font-semibold text-gray-800\" (h2)\n- Body text (dark): \"text-base text-gray-300\"\n- Body text (light): \"text-base text-gray-700\"\n- Small text (dark): \"text-sm text-gray-400\"\n- Small text (light): \"text-sm text-gray-500\"\n- Line height: \"leading-relaxed\" for readability\n\n‚úÖ Spacing & Layout:\n- Consistent spacing: gap-4, gap-6, space-y-4, space-x-3\n- Padding: p-4, p-6, px-4, py-2\n- Margins: mt-4, mb-6, mx-auto\n- Grid/Flex layouts: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n\n‚úÖ Visual Effects:\n- Shadows with glow: shadow-2xl, shadow-xl shadow-cyan-500/50, shadow-lg shadow-purple-500/30\n- Large rounded corners: rounded-2xl, rounded-3xl (modern look)\n- Smooth transitions: transition-all duration-300\n- Borders with transparency: border border-slate-700/50, border border-cyan-500/20\n- Backdrop blur: backdrop-blur-xl, backdrop-blur-lg\n\n‚úÖ Responsive Design (Mobile-First):\n- Use responsive prefixes: sm:, md:, lg:, xl:\n- Responsive text: \"text-4xl md:text-5xl lg:text-6xl\"\n- Responsive grids: \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\"\n- Responsive padding: \"px-4 md:px-8 lg:px-12\"\n\n‚úÖ Interactive States:\n- Hover with glow: hover:shadow-xl hover:shadow-cyan-500/50\n- Hover with scale: hover:scale-[1.02] transition-transform\n- Focus: focus:ring-2 focus:ring-cyan-500, focus:outline-none\n- Active: active:scale-95\n- Disabled: disabled:opacity-30 disabled:cursor-not-allowed\n\n‚úÖ Modern Patterns to Use (MANDATORY):\n- **Glassmorphism**: \"bg-slate-800/40 backdrop-blur-xl border border-slate-700/50\"\n- **Gradient text**: \"bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent\"\n- **Gradient backgrounds**: \"bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\"\n- **Glow effects**: \"shadow-xl shadow-cyan-500/50\"\n- **Hero sections**: Large gradient title + subtitle\n- **Empty states**: Elegant messages (\"Your list is empty.\" not \"No items\")\n- **Subtle animations**: transition-all duration-300\n\n‚ùå AVOID (Outdated/Boring Patterns):\n- Plain white backgrounds (use gradients or dark themes)\n- Basic blue (#3B82F6) as primary color (use cyan, purple, indigo)\n- Harsh colors without hover states\n- No shadows or depth\n- Flat, lifeless UIs with no visual interest\n- Simple red headers (use gradients!)\n- Tiny rounded corners (use rounded-xl, rounded-2xl)\n- Plain \"No items\" messages (make empty states elegant)\n\n‚úÖ EXAMPLE Modern App Styling (Dark Theme with Gradient):\n<div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 px-4 py-12\">\n  <div className=\"max-w-4xl mx-auto text-center\">\n    {/* Hero Header - ALWAYS include */}\n    <h1 className=\"text-5xl md:text-6xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent mb-4\">\n      Analytics Dashboard\n    </h1>\n    <p className=\"text-xl text-gray-400 mb-12\">\n      Track your metrics in real-time.\n    </p>\n\n    {/* Main Container - Glassmorphism */}\n    <div className=\"bg-slate-800/40 backdrop-blur-xl border border-slate-700/50 rounded-2xl shadow-2xl shadow-cyan-500/10 p-8\">\n      {/* Input Section */}\n      <form className=\"flex gap-4 mb-8\">\n        <input\n          type=\"text\"\n          placeholder=\"What needs to be done?\"\n          className=\"flex-1 bg-slate-800/50 border border-slate-700 text-gray-200 rounded-xl px-6 py-4 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all placeholder:text-gray-500\"\n        />\n        <button\n          type=\"submit\"\n          className=\"bg-slate-700 hover:bg-slate-600 text-gray-200 font-semibold px-8 py-4 rounded-xl transition-all hover:shadow-lg\"\n        >\n          Add\n        </button>\n      </form>\n\n      {/* Empty State - Elegant */}\n      <div className=\"py-16 text-center\">\n        <p className=\"text-gray-400 text-lg\">\n          Your to-do list is empty.\n        </p>\n      </div>\n\n      {/* Task List Example (when there are tasks) */}\n      {/* Uncomment when showing tasks:\n      <ul className=\"space-y-3\">\n        <li className=\"flex items-center gap-4 p-4 bg-slate-700/30 border border-slate-600/30 rounded-xl hover:bg-slate-700/50 transition-all\">\n          <input type=\"checkbox\" className=\"w-5 h-5 text-cyan-500 rounded\" />\n          <span className=\"flex-1 text-gray-200\">Example task</span>\n          <button className=\"text-rose-400 hover:text-rose-300 font-medium transition-colors\">\n            Delete\n          </button>\n        </li>\n      </ul>\n      */}\n    </div>\n  </div>\n</div>\n\nüé® KEY TAKEAWAYS:\n1. Dark theme by default (slate-900 background with purple gradient)\n2. Hero header with GRADIENT TEXT (cyan-400 to blue-500)\n3. Subtitle/tagline for context\n4. Glassmorphism containers (backdrop-blur-xl, semi-transparent backgrounds)\n5. Elegant empty states (not just \"No items\")\n6. Generous spacing and large rounded corners (rounded-2xl)\n7. Sophisticated color palette (cyan, purple, slate - not basic blue)\n8. Glow effects on containers (shadow-cyan-500/10)\n\nMake EVERY app look this polished and modern!",

  "RAW_CODE_OUTPUT_ONLY": "CRITICAL OUTPUT FORMAT RULES (VIOLATIONS WILL BE REJECTED):\n\n‚ùå ABSOLUTELY FORBIDDEN - Do NOT wrap code in markdown:\n```jsx\nimport React from \"react\";     // ‚ùå WRONG - has backticks\nfunction App() { }\n```\n\n‚ùå FORBIDDEN - Do NOT add language tags:\n```javascript\n```js\n```jsx\n```tsx\n\n‚ùå FORBIDDEN - Do NOT add explanations or text outside code\n\n‚úÖ REQUIRED FORMAT - Return ONLY raw code text:\nimport React from \"react\";     // ‚úÖ CORRECT - starts directly with code\nimport { useState } from \"react\";\n\nfunction App() {\n  return <div>Hello</div>;\n}\n\nexport default App;           // ‚úÖ CORRECT - ends with code\n\nOUTPUT REQUIREMENTS:\n- Your response must START with actual code (import/const/function/etc)\n- Your response must END with actual code (closing brace/semicolon/etc)\n- NO backticks (```) anywhere in your response\n- NO markdown formatting\n- NO explanatory text before or after code\n- JUST the raw code content that would go directly in a .jsx/.js file",

  "SINGLE_FILE_OUTPUT_ONLY": "SINGLE FILE OUTPUT REQUIREMENT (CRITICAL - SYSTEM WILL BREAK IF VIOLATED):\n\nüö® YOU MUST GENERATE ONLY ONE FILE AT A TIME üö®\n\n‚ùå ABSOLUTELY FORBIDDEN - Multi-file output with comment separators:\nimport React from \"react\";\nfunction App() { return <div>App</div>; }\nexport default App;\n\n// components/Header.jsx          ‚ùå WRONG - DO NOT include other files\nimport React from \"react\";\nfunction Header() { return <header>Header</header>; }\n\n// components/Footer.jsx          ‚ùå WRONG - DO NOT include other files\nfunction Footer() { return <footer>Footer</footer>; }\n\n‚ùå FORBIDDEN PATTERNS:\n- \"// components/SomeFile.jsx\" separators\n- \"// OtherFile.js\" comments introducing new files\n- Multiple component definitions in one response\n- Generating all project files at once\n\n‚úÖ REQUIRED FORMAT - ONLY the file you were asked to generate:\nIf asked to generate \"lib/helpers.js\", respond with ONLY:\nexport const formatTodoText = (text) => {\n  return text.trim();\n};\n\nexport const generateId = () => {\n  return Date.now();\n};\n\n‚úÖ If asked to generate \"components/Header.jsx\", respond with ONLY:\nimport React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"bg-blue-600 text-white p-4\">\n      <h1 className=\"text-2xl font-bold\">My App</h1>\n    </header>\n  );\n}\n\nexport default Header;\n\nCRITICAL RULES:\n1. Look at the \"Generate code for: [FILENAME]\" instruction\n2. Generate ONLY the code for that ONE file\n3. Do NOT generate any other files even if they're mentioned in the plan\n4. Do NOT add comment separators for other files\n5. The system will call you multiple times for each file - you only handle ONE per call\n\nVALIDATION CHECKLIST:\n‚úì Does my response contain ONLY ONE file's code?\n‚úì Did I avoid adding \"// otherfile.jsx\" comments?\n‚úì Did I start with imports/code for the requested file?\n‚úì Did I end with the export for the requested file?\n‚úì Is there NO code for any other file in my response?\n\nIf you violate this rule, the generated code will have syntax errors and duplicate declarations.\nThe user is asking you to generate ONE file at a time. Trust the system.",

  "DETAILED_PLANNING_GUIDANCE": "DETAILED FILE SPECIFICATIONS (CRITICAL FOR COMPLEX APPS):\n\nFor each file you plan to create, provide detailed specifications that give the code generator\nconcrete guidance on what to build. This prevents vague implementations and ensures completeness.\n\nüéØ REQUIRED: Add \"fileDetails\" object to your plan with specifications for EACH file.\n\nFormat:\n{\n  \"filesToCreate\": [\"App.jsx\", \"components/ChessBoard.jsx\", \"hooks/useChessLogic.js\"],\n  \"fileDetails\": {\n    \"App.jsx\": {\n      \"purpose\": \"Main entry point that renders ChessBoard\",\n      \"requiredImports\": \"ChessBoard from './components/ChessBoard'\",\n      \"requiredState\": \"None (stateless wrapper)\",\n      \"layoutStructure\": \"Centered container with title and ChessBoard component\"\n    },\n    \"components/ChessBoard.jsx\": {\n      \"purpose\": \"Render 8x8 chess grid with interactive pieces and game state\",\n      \"requiredState\": \"board: 8x8 array of pieces, selectedSquare: {row, col} or null\",\n      \"requiredFunctions\": \"handleSquareClick(row, col) - handles piece selection and movement\",\n      \"dataStructure\": \"board[row][col] = piece (e.g., '‚ôî' for white king, null for empty)\",\n      \"initialData\": \"board[0] = ['‚ôú','‚ôû','‚ôù','‚ôõ','‚ôö','‚ôù','‚ôû','‚ôú'], board[1] = 8 '‚ôü' pawns, etc.\",\n      \"keyFeatures\": \"Click to select piece, highlight selected square, render all 32 chess pieces in starting positions\",\n      \"styling\": \"8x8 grid with alternating colors, hover effects, selection highlights\"\n    },\n    \"hooks/useChessLogic.js\": {\n      \"purpose\": \"Custom hook managing chess game state and logic\",\n      \"exports\": \"{board, selectedSquare, selectSquare, movePiece, currentPlayer}\",\n      \"initialState\": \"8x8 array with 32 pieces in standard chess starting positions (white bottom, black top)\",\n      \"returnedFunctions\": \"selectSquare(row, col), movePiece(fromRow, fromCol, toRow, toCol)\",\n      \"keyFeatures\": \"Initialize full chess board, track selected piece, basic move execution\"\n    }\n  }\n}\n\nüìã SPECIFICATION GUIDELINES BY APP TYPE:\n\n**For Interactive Games (Chess, Checkers, Tic-Tac-Toe):**\n- **initialData**: Specify EXACT starting state (all pieces with positions)\n- **dataStructure**: Define array/object structure (e.g., 8x8 array, board[row][col])\n- **requiredState**: All state variables (board, selected piece, current player, move history)\n- **requiredFunctions**: Click handlers, move validation, turn management\n- **keyFeatures**: Selection logic, move execution, win condition checking\n\n**For Forms (Login, Registration, Survey):**\n- **requiredState**: Form fields object (email, password, errors)\n- **requiredFunctions**: handleChange, handleSubmit, validateField\n- **keyFeatures**: Real-time validation, error display, submit logic\n- **initialData**: Empty form state with proper structure\n\n**For Lists (Todo, Shopping, Notes):**\n- **requiredState**: items array, input value\n- **requiredFunctions**: addItem, removeItem, updateItem\n- **dataStructure**: Array of objects with id, text, completed properties\n- **keyFeatures**: Add/remove items, mark complete, persistence\n\n**For Dashboards (Analytics, Admin Panel):**\n- **requiredState**: Data arrays for charts/tables\n- **initialData**: Sample data for demonstration\n- **keyFeatures**: Data visualization, filtering, sorting\n\n‚ùå BAD EXAMPLE (too vague):\n{\n  \"components/ChessBoard.jsx\": {\n    \"purpose\": \"Display chess board\"\n  }\n}\n\n‚úÖ GOOD EXAMPLE (detailed and actionable):\n{\n  \"components/ChessBoard.jsx\": {\n    \"purpose\": \"Render 8x8 interactive chess board with all pieces\",\n    \"requiredState\": \"board (8x8 array), selectedSquare ({row, col} or null)\",\n    \"requiredFunctions\": \"handleSquareClick(row, col)\",\n    \"initialData\": \"board[0]=['‚ôú','‚ôû','‚ôù','‚ôõ','‚ôö','‚ôù','‚ôû','‚ôú'], board[1]=Array(8).fill('‚ôü'), board[6]=Array(8).fill('‚ôô'), board[7]=['‚ôñ','‚ôò','‚ôó','‚ôï','‚ôî','‚ôó','‚ôò','‚ôñ']\",\n    \"keyFeatures\": \"64 squares with alternating colors, render all 32 pieces, click to select/move pieces, highlight selected square\",\n    \"dataStructure\": \"2D array where board[row][col] = piece unicode or null\"\n  }\n}\n\nüîë KEY PRINCIPLES:\n1. **Be Specific**: Don't say \"manage state\" - specify WHICH state variables and WHAT they contain\n2. **Show Data Structure**: Give examples of how data is organized (arrays, objects, nested structures)\n3. **Initial Values**: Specify exact initial state (chess pieces in position, not empty board)\n4. **Function Signatures**: Name functions and describe what they do\n5. **Feature Completeness**: List ALL features that must work in this file\n\nThis detailed planning ensures the generator produces complete, functional code instead of\nplaceholders like {/* TODO: add pieces */} or empty implementations.",

  "PACKAGE_MANAGEMENT_RULES": "üö® PACKAGE MANAGEMENT RULES (CRITICAL - BROWSER-BASED ENVIRONMENT) üö®\n\nThis is a BROWSER-BASED system. Users CANNOT run \"npm install\".\nAny external package you import WILL CAUSE RUNTIME ERRORS.\n\n‚ùå ABSOLUTELY BANNED PACKAGES (Will cause ReferenceError):\n1. **prop-types** - Deprecated, legacy React pattern\n   ‚ùå import PropTypes from \"prop-types\";\n   ‚ùå Component.propTypes = { ... };\n\n2. **class-validator** - Backend validation library\n3. **joi** - Backend validation library\n4. **yup** - Form validation (not available in browser)\n5. **zod** - Schema validation (requires build step)\n6. **axios** - Use fetch API instead\n7. **lodash** - Use native JavaScript methods\n8. **moment** - Use native Date or date-fns (if pre-bundled)\n9. **uuid** - Use crypto.randomUUID() or Date.now()\n10. **dotenv** - Environment variables (backend only)\n11. **express** - Backend server framework\n12. **mongoose** - Database ORM (backend only)\n13. **any @types/* packages** - TypeScript types (not needed in JSX)\n\n‚ùå NEVER IMPORT THESE PATTERNS:\n- import Something from \"package-name\";  (unless it's in SUPPORTED list)\n- require(\"package-name\");\n- Any package that needs \"npm install\"\n\n‚úÖ SUPPORTED (Pre-bundled in browser):\n1. **react** - Core React library\n   ‚úÖ import React from \"react\";\n   ‚úÖ import { useState, useEffect, useMemo } from \"react\";\n\n2. **react-dom** - React DOM rendering\n   ‚úÖ import ReactDOM from \"react-dom/client\";\n\n3. **Built-in Browser APIs** (NO import needed):\n   ‚úÖ fetch() - HTTP requests\n   ‚úÖ localStorage / sessionStorage\n   ‚úÖ Date, Math, Array, Object (native JavaScript)\n   ‚úÖ crypto.randomUUID() - Generate unique IDs\n   ‚úÖ setTimeout, setInterval\n   ‚úÖ URL, URLSearchParams\n   ‚úÖ FormData, Blob, File\n\n‚úÖ ALTERNATIVES TO BANNED PACKAGES:\n\n**Instead of PropTypes:**\n// ‚ùå DON'T USE\n// import PropTypes from \"prop-types\";\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired\n};\n\n// ‚úÖ USE NOTHING (preferred)\nfunction TodoItem({ todo, onRemove }) {\n  return /* render todo.text */;\n}\n\n// ‚úÖ OR USE JSDOC (optional)\n/**\n * @param {{id: number, text: string}} todo\n * @param {Function} onRemove\n */\nfunction TodoItem({ todo, onRemove }) {\n  return /* render todo data */;\n}\n\n**Instead of axios:**\n// ‚ùå DON'T USE\n// import axios from \"axios\";\nconst data = await axios.get(\"/api/users\");\n\n// ‚úÖ USE fetch\nconst response = await fetch(\"/api/users\");\nconst data = await response.json();\n\n**Instead of lodash:**\n// ‚ùå DON'T USE\n// import _ from \"lodash\";\nconst unique = _.uniq(array);\n\n// ‚úÖ USE native JavaScript\nconst unique = [...new Set(array)];\n\n**Instead of uuid:**\n// ‚ùå DON'T USE\n// import { v4 as uuidv4 } from \"uuid\";\nconst id = uuidv4();\n\n// ‚úÖ USE native crypto or timestamp\nconst id = crypto.randomUUID(); // Modern browsers\n// OR\nconst id = Date.now(); // Simple timestamp ID\n// OR\nconst id = Math.random().toString(36).substr(2, 9); // Random string\n\n**Instead of moment:**\n// ‚ùå DON'T USE\n// import moment from \"moment\";\nconst date = moment().format(\"YYYY-MM-DD\");\n\n// ‚úÖ USE native Date\nconst date = new Date().toISOString().split(\"T\")[0];\n// OR\nconst date = new Date().toLocaleDateString();\n\nüéØ VALIDATION CHECKLIST BEFORE GENERATING CODE:\n‚úì Does my code import ONLY \"react\" or \"react-dom\"?\n‚úì Did I avoid PropTypes completely?\n‚úì Did I use native JavaScript instead of lodash/underscore?\n‚úì Did I use fetch() instead of axios?\n‚úì Did I use Date instead of moment?\n‚úì Did I use crypto.randomUUID() or Date.now() instead of uuid?\n‚úì Are all my imports from local files (./components/...) or React only?\n\n‚ö†Ô∏è IF YOU NEED A PACKAGE:\nIf a feature absolutely requires an external package (very rare), you MUST:\n1. Mention it's not available in browser environment\n2. Suggest an alternative approach using built-in APIs\n3. DO NOT import it anyway hoping it works\n\nüîë REMEMBER: This is a browser playground, not a full Node.js environment.\nOnly React, React-DOM, and native browser APIs are available.",

  "SANDPACK_NAVIGATION_RULES": "üö® NAVIGATION PATTERNS (CRITICAL - SANDPACK PREVIEW ENVIRONMENT) üö®\n\n‚ö†Ô∏è PROBLEM: Using <a href=\"#\"> causes WHITE SCREEN and CORS errors in Sandpack preview\nWhen users click links with href=\"#\", the page navigates/reloads, breaking the React app.\n\n‚ùå ABSOLUTELY FORBIDDEN Navigation Patterns:\n\n1. **Empty href links** (causes page reload):\n   ‚ùå <a href=\"#\">Home</a>\n   ‚ùå <a href=\"#\">About</a>\n   ‚ùå <a href=\"#\">Contact</a>\n   Result: White screen, CORS errors, app breaks\n\n2. **href without preventDefault**:\n   ‚ùå <a href=\"#\" onClick={handleClick}>Link</a>  // Still navigates!\n\n3. **External hrefs in demos**:\n   ‚ùå <a href=\"https://example.com\">External</a>  // Opens in iframe, breaks\n\n‚úÖ CORRECT Navigation Patterns:\n\n**Option 1: Use Buttons (PREFERRED for internal navigation):**\n‚úÖ <button onClick={handleNavClick} className=\"text-gray-600 hover:text-black\">\n     Home\n   </button>\n\n‚úÖ <button onClick={handleNavClick} className=\"text-gray-600 hover:text-black\">\n     About\n   </button>\n\nExample implementation:\nconst handleNavClick = (page) => {\n  console.log(\"Navigating to:\", page);\n  // Add your routing logic here\n};\n\n<nav className=\"flex space-x-4\">\n  <button onClick={() => handleNavClick(\"home\")} className=\"text-gray-600 hover:text-black\">\n    Home\n  </button>\n  <button onClick={() => handleNavClick(\"about\")} className=\"text-gray-600 hover:text-black\">\n    About\n  </button>\n</nav>\n\n**Option 2: Links with preventDefault (if you need <a> for styling):**\n‚úÖ <a\n     href=\"#\"\n     onClick={(e) => {\n       e.preventDefault();\n       handleNavClick(\"home\");\n     }}\n     className=\"text-gray-600 hover:text-black\"\n   >\n     Home\n   </a>\n\n**Option 3: Fake links (no href):**\n‚úÖ <a onClick={handleNavClick} className=\"text-gray-600 hover:text-black cursor-pointer\">\n     Home\n   </a>\n\nüéØ WHY BUTTONS ARE PREFERRED:\n1. Semantic HTML - buttons are for actions, links are for navigation\n2. No need for preventDefault() - buttons don't navigate by default\n3. Better accessibility - screen readers understand button purpose\n4. Simpler code - just onClick, no href needed\n5. No risk of accidental page reloads\n\n‚úÖ STYLING BUTTONS TO LOOK LIKE LINKS:\nButtons can be styled to look exactly like links:\n<button className=\"text-blue-600 hover:text-blue-800 underline cursor-pointer\">\n  Looks like a link\n</button>\n\nOr remove default button styles:\n<button className=\"text-gray-600 hover:text-black font-medium transition\">\n  Navigation link\n</button>\n\n‚ùå SYMPTOMS OF VIOLATION (what users will see):\n- White screen after clicking navigation\n- Console errors: \"Failed to load resource: net::ERR_FAILED\"\n- Console errors: \"Access-Control-Allow-Origin header is present\"\n- Console errors: \"Failed to construct 'URL': Invalid URL\"\n- Preview breaks and needs refresh\n\n‚úÖ VALIDATION CHECKLIST:\n‚úì Did I use <button> for all internal navigation links?\n‚úì Did I add onClick handlers to all navigation elements?\n‚úì Did I avoid <a href=\"#\"> completely?\n‚úì If I used <a href=\"#\">, did I add e.preventDefault()?\n‚úì Do all clickable elements have cursor-pointer class?\n‚úì Are there console.log statements for debugging navigation?\n\nüîß FIXING EXISTING CODE:\nIf you see navigation links that cause white screens:\n\nBEFORE (BROKEN):\n<nav>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</nav>\n\nAFTER (FIXED):\nconst handleNavClick = (page) => {\n  console.log(\"Navigating to:\", page);\n};\n\n<nav>\n  <button onClick={() => handleNavClick(\"home\")}>Home</button>\n  <button onClick={() => handleNavClick(\"about\")}>About</button>\n  <button onClick={() => handleNavClick(\"contact\")}>Contact</button>\n</nav>\n\nüîë REMEMBER:\n- Sandpack preview runs in an iframe\n- Navigation triggers cause the iframe to reload\n- Reloading breaks the React app context\n- Use buttons for internal navigation, always\n- This is specific to preview environments, not production apps",

  "UNIVERSAL_UX_PRINCIPLES": "üéØ UNIVERSAL UX PRINCIPLES (APPLY TO ALL APPS)\n\nThese principles apply intelligently to ANY app type - think about what makes sense for the specific context.\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n‚ú® USER FEEDBACK PRINCIPLE\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n**Core Idea**: Users should always know their actions succeeded or failed.\n\n**How to Apply**:\n- Actions with side effects ‚Üí Provide feedback (toast, message, animation)\n- Todo added? ‚Üí \"Task added successfully\"\n- Form submitted? ‚Üí Success message or error details\n- Item deleted? ‚Üí Visual feedback (fade out + notification)\n- Button clicked? ‚Üí Loading state or confirmation\n\n**Examples Across Domains**:\n- Todo app: Toast notification when task added/completed\n- Calculator: Visual highlight when button pressed\n- Form: Validation messages, success confirmation\n- Timer: Sound/notification when time's up\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüìä INFORMATION ARCHITECTURE PRINCIPLE\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n**Core Idea**: Organize information in meaningful, scannable groups.\n\n**How to Apply**:\n- Group related items into sections\n- Show counts/statistics where relevant\n- Use visual hierarchy (headings, spacing, colors)\n- Separate different states (active vs completed, inbox vs done)\n\n**Examples Across Domains**:\n- Todo app: \"ACTIVE (5)\" and \"COMPLETED (2)\" sections\n- Shopping cart: \"Cart Items (3)\" and \"Saved for Later (1)\"\n- Dashboard: Separate panels for different metrics\n- File manager: Folders, recent files, starred items\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüí¨ HELPFUL EMPTY STATES PRINCIPLE\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n**Core Idea**: Empty screens should guide users, not feel broken.\n\n**How to Apply**:\n- Never show just \"No items\" or blank space\n- Explain what this section is for\n- Suggest the first action (\"Add your first task\")\n- Make it friendly and encouraging\n\n**Examples Across Domains**:\n- Todo: \"Your task list is ready! Add your first task to get started.\"\n- Shopping cart: \"Your cart is empty. Browse our products to start shopping.\"\n- Messages: \"No messages yet. Start a conversation!\"\n- Dashboard: \"No data to display. Connect your account to see insights.\"\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüé® MICRO-INTERACTIONS PRINCIPLE\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n**Core Idea**: Small animations make interactions feel responsive and satisfying.\n\n**How to Apply**:\n- Smooth transitions when items appear/disappear (transition-all duration-300)\n- Hover effects on interactive elements (hover:scale-105, hover:shadow-lg)\n- Loading states for async actions (spinner, skeleton, pulse animation)\n- Satisfying feedback (checkmark animation, item sliding out when deleted)\n\n**Examples Across Domains**:\n- Todo: Smooth fade-out when task deleted, checkmark animation when completed\n- Button: Scale slightly on hover, slight press effect on click\n- Form: Input borders glow when focused\n- Modal: Fade in backdrop, slide in content\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüè∑Ô∏è VISUAL INDICATORS PRINCIPLE\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n**Core Idea**: Show status and metrics clearly without requiring users to read text.\n\n**How to Apply**:\n- Use badges for counts (\"5 items\", \"2 new\")\n- Icons for status (‚úì completed, ‚ö†Ô∏è error, ‚è∞ pending)\n- Color coding for categories/priorities (red=urgent, green=done)\n- Progress bars for completion percentage\n\n**Examples Across Domains**:\n- Todo: Count badges \"COMPLETED (2)\", priority color coding\n- Shopping cart: Item count badge on cart icon\n- Form: ‚úì for valid fields, ‚úó for errors\n- File upload: Progress bar showing upload percentage\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n‚úçÔ∏è THOUGHTFUL COPY PRINCIPLE\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n**Core Idea**: Text should be clear, specific, and match the app's personality.\n\n**How to Apply**:\n- Specific placeholders (\"Add a new task...\" not \"Enter text\")\n- Action-oriented button labels (\"Save Changes\" not \"Submit\")\n- Friendly error messages (\"That didn't work. Try again?\" not \"Error\")\n- Match tone to purpose (playful for games, professional for work tools)\n\n**Examples Across Domains**:\n- Todo: \"What needs to be done?\" vs generic \"Add item\"\n- Login: \"Welcome back!\" vs \"Login Form\"\n- Error: \"Oops! We couldn't save that. Check your connection.\" vs \"Error 500\"\n- Success: \"You're all set!\" vs \"Operation completed\"\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüìê LAYOUT & SPACING PRINCIPLE\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n**Core Idea**: Use white space intentionally - not too cramped, not wastefully empty.\n\n**How to Apply**:\n- Proper vertical rhythm (consistent spacing between sections)\n- Avoid excessive empty space (no giant gaps between elements)\n- Keep related elements close together (visual grouping)\n- Responsive spacing (more compact on mobile)\n- Balance density with readability\n\n**Tailwind Spacing Guidelines**:\n- **Section gaps**: gap-8, gap-10, gap-12 (NOT gap-20, gap-32)\n- **Between list items**: gap-3, gap-4, space-y-3\n- **Container padding**: p-6, p-8, px-6 py-8 (NOT p-16, p-20)\n- **Section margins**: mb-6, mb-8, mt-8 (NOT mb-16, mb-20)\n- **Header to content**: gap-8, gap-10 (NOT gap-24, gap-32)\n\n**Examples Across Domains**:\n- Todo app: Header ‚Üí Task input ‚Üí Task list with gap-8 between sections\n- Dashboard: Stat cards ‚Üí Charts with gap-6 between, no huge empty areas\n- Form: Field groups with gap-4, section spacing with gap-8\n- Profile page: Avatar ‚Üí Info ‚Üí Actions with mb-6 between sections\n\n**Common Mistakes to AVOID**:\n- ‚ùå Huge empty space between header and main content (py-20, py-32)\n- ‚ùå Cramped lists with no spacing (space-y-0)\n- ‚ùå Inconsistent spacing (gap-4 here, gap-16 there)\n- ‚ùå Over-padding containers (p-20 when p-8 would work)\n\n**Good Patterns**:\n- ‚úÖ Consistent vertical rhythm: gap-8 for major sections, gap-4 for related items\n- ‚úÖ Compact layouts: Header immediately followed by content area (gap-8)\n- ‚úÖ Grouped elements: Related items closer together than unrelated items\n- ‚úÖ Breathing room: Enough space to separate sections without wasting screen space\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüéØ HOW TO APPLY THESE PRINCIPLES\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n1. **Think contextually**: Not every app needs every pattern. Choose what fits.\n2. **Be consistent**: If you use toasts for one action, use them for similar actions.\n3. **Don't overdo it**: More animations ‚â† better. Keep it subtle and purposeful.\n4. **Test the basics**: Ensure feedback works, empty states are helpful, copy is clear.\n\nRemember: These are PRINCIPLES, not templates. Apply them intelligently based on what the specific app needs.",

  "NO_INITIALIZATION_CODE": "üö® CRITICAL: DO NOT GENERATE INITIALIZATION CODE (SYSTEM WILL BREAK) üö®\n\nThe preview system automatically handles React initialization. Your code must NEVER include it.\n\n‚ùå ABSOLUTELY FORBIDDEN - Never generate these patterns:\n\n1. ReactDOM.createRoot() calls:\n   ‚ùå const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n   ‚ùå ReactDOM.createRoot(document.getElementById(\"root\")).render(<App />);\n   ‚ùå const container = document.getElementById(\"root\");\n   ‚ùå const root = createRoot(container);\n\n2. root.render() calls:\n   ‚ùå root.render(<App />);\n   ‚ùå root.render(<React.StrictMode><App /></React.StrictMode>);\n\n3. ReactDOM.render() (legacy):\n   ‚ùå ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n4. document.getElementById(\"root\") references:\n   ‚ùå Any code accessing the root element for initialization\n\n‚ùå EXAMPLE OF WHAT NOT TO GENERATE:\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";  // ‚ùå Don't import ReactDOM\n\nfunction App() {\n  return <div>My App</div>;\n}\n\nexport default App;\n\n// ‚ùå NEVER INCLUDE THIS BLOCK:\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n\n‚úÖ CORRECT FORMAT - Component definitions only:\nimport React from \"react\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div className=\"min-h-screen bg-slate-900 p-8\">\n      <h1 className=\"text-4xl font-bold text-white\">Counter: {count}</h1>\n      <button \n        onClick={() => setCount(count + 1)}\n        className=\"bg-blue-600 text-white px-4 py-2 rounded-lg\"\n      >\n        Increment\n      </button>\n    </div>\n  );\n}\n\nexport default App;  // ‚úÖ Just export the component\n\nüéØ WHY THIS RULE EXISTS:\n1. The preview system (PreviewPanel.jsx) automatically adds initialization code\n2. If you add it too, the code appears twice: \"Identifier 'root' has already been declared\"\n3. This causes a SyntaxError and breaks the entire preview\n4. Your job is to generate ONLY the component definitions\n5. The system handles rendering and mounting automatically\n\n‚úÖ WHAT YOU SHOULD GENERATE:\n- Component definitions (function MyComponent() { ... })\n- Export statements (export default App)\n- Hooks and state management\n- Event handlers and logic\n- JSX markup and styling\n- Imports from React and local files\n\n‚ùå WHAT YOU SHOULD NOT GENERATE:\n- ReactDOM imports\n- createRoot() calls\n- root.render() calls\n- document.getElementById(\"root\") references\n- Any mounting or initialization logic\n\nüîç VALIDATION CHECKLIST:\n‚úì Did I avoid importing ReactDOM?\n‚úì Did I avoid any createRoot() or render() calls?\n‚úì Does my code end with \"export default ComponentName\"?\n‚úì Is there NO reference to document.getElementById(\"root\")?\n‚úì Did I generate ONLY component definitions and exports?\n\nIf you violate this rule, the generated app will show:\n- ‚ùå \"Identifier 'root' has already been declared\" error\n- ‚ùå White screen / broken preview\n- ‚ùå Babel syntax errors\n\nREMEMBER: You are generating LIBRARY CODE (components), not APPLICATION CODE (initialization).\nThe preview system is the APPLICATION that uses your components."
}
