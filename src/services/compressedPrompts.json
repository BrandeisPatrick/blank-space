{
  "MODERN_UI_COMPRESSED": "üé® UI DESIGN ESSENTIALS:\n\n**Dark Theme (Default)**:\n- Background: bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\n- Cards: bg-slate-800/40 backdrop-blur-xl border border-slate-700/50 rounded-2xl\n- Text: text-gray-100 (headings), text-gray-300 (body), text-gray-400 (muted)\n- Accent: cyan-400, purple-500, indigo-500 (NO basic blue)\n\n**Component Patterns**:\n- Hero: text-5xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent\n- Button: bg-indigo-600 hover:bg-indigo-700 px-6 py-3 rounded-xl shadow-lg transition-all\n- Input: bg-slate-800/50 border border-slate-700 rounded-xl px-6 py-4 focus:ring-2 focus:ring-cyan-500\n\n**Effects**:\n- Glassmorphism: backdrop-blur-xl with semi-transparent backgrounds\n- Shadows with glow: shadow-xl shadow-cyan-500/50\n- Smooth transitions: transition-all duration-300\n\n**Typography**: text-3xl font-bold (h1), text-2xl font-semibold (h2), leading-relaxed for body\n**Spacing**: gap-6 for sections, gap-3 for lists, p-6 for containers (NOT excessive padding)\n**Responsive**: Mobile-first with sm:, md:, lg: prefixes",

  "UNIVERSAL_UX_COMPRESSED": "‚ú® UX PRINCIPLES:\n\n1. **User Feedback**: Toast/messages for actions (\"Task added\", \"Deleted\")\n2. **Organization**: Group items (\"ACTIVE (5)\", \"COMPLETED (2)\")\n3. **Empty States**: Helpful messages (\"Your list is ready! Add your first task\")\n4. **Micro-interactions**: Smooth transitions (transition-all duration-300), hover effects\n5. **Visual Indicators**: Badges for counts, icons for status, color coding\n6. **Thoughtful Copy**: Specific placeholders (\"What needs to be done?\" not \"Enter text\")\n7. **Layout**: Consistent spacing (gap-6 sections, gap-3 lists), no excessive empty space",

  "PACKAGE_MANAGEMENT_COMPRESSED": "üì¶ PACKAGE RULES:\n\n‚úÖ ALLOWED: react, react-dom, native browser APIs (fetch, localStorage, crypto)\n‚ùå BANNED: prop-types, axios, lodash, uuid, moment, any npm packages\n\nALTERNATIVES:\n- Use fetch() not axios\n- Use Date not moment  \n- Use crypto.randomUUID() not uuid\n- Use native JS not lodash\n- NO PropTypes (just remove them)\n\nVALIDATION: Check imports - only \"react\" and \"react-dom\" allowed",

  "NO_INITIALIZATION_COMPRESSED": "üö® NO INITIALIZATION CODE:\n\nNEVER include:\n‚ùå ReactDOM.createRoot()\n‚ùå root.render()\n‚ùå document.getElementById(\"root\")\n\nONLY generate:\n‚úÖ Component definitions\n‚úÖ export default ComponentName\n\nSystem handles rendering automatically.",

  "DETAILED_PLANNING_COMPRESSED": "üìã FILE SPECIFICATIONS:\n\nFor EACH file in filesToCreate, provide fileDetails:\n```\n\"fileDetails\": {\n  \"components/ChessBoard.jsx\": {\n    \"purpose\": \"Render 8x8 interactive chess board\",\n    \"requiredState\": \"board (8x8 array), selectedSquare ({row,col})\",\n    \"requiredFunctions\": \"handleSquareClick(row, col)\",\n    \"initialData\": \"ALL 32 pieces in starting positions\",\n    \"keyFeatures\": \"Selection, movement, highlighting\"\n  }\n}\n```\n\n**Complex Apps**: Specify EXACT initial data (chess: all 32 pieces, not empty board)\n**Forms**: List all fields, validation rules\n**Lists**: Data structure (array of objects with id, text, completed)",

  "FOLDER_STRUCTURE_COMPRESSED": "üìÅ FOLDER STRUCTURE:\n\n‚úÖ REQUIRED:\n- App.jsx at root\n- components/ for ALL UI components\n- hooks/ for ALL custom hooks\n- lib/ or utils/ for helpers\n\n‚ùå FORBIDDEN:\n- Components at root (except App.jsx)\n- Flat structure\n\n‚úÖ IMPORTS:\n- From App: import Header from './components/Header'\n- Between components: import TodoItem from './TodoItem'\n- Hooks: import { useTodos } from '../hooks/useTodos'",

  "CODE_FORMATTING_COMPRESSED": "‚úçÔ∏è FORMATTING:\n\n‚úÖ REQUIRED:\n- Double quotes (\"\") for strings (NO single quotes)\n- Semicolons at end of statements\n- 2-space indentation\n- Self-closing tags: <Component />\n\n‚ùå WRONG:\n- import React from 'react';  // single quotes\n- const name = 'John';  // single quotes\n\n‚úÖ CORRECT:\n- import React from \"react\";\n- const name = \"John\";\n- const msg = `Hello ${name}`;  // template literals OK",

  "RAW_CODE_OUTPUT_COMPRESSED": "üìÑ OUTPUT FORMAT:\n\n‚ùå NO markdown backticks:\n```jsx  // WRONG\n\n‚úÖ Start directly with code:\nimport React from \"react\";  // CORRECT\n\nYour response = raw code only (no explanations, no backticks)",

  "SINGLE_FILE_OUTPUT_COMPRESSED": "üéØ SINGLE FILE ONLY:\n\n‚ùå DO NOT generate multiple files:\n// App.jsx\n// components/Header.jsx  // WRONG - multiple files\n\n‚úÖ Generate ONLY the requested file\nSystem calls you once per file",

  "DEBUGGER_PATTERNS": "üêõ COMMON REACT ISSUES:\n\n1. **State Issues**:\n   - Using stale state in callbacks\n   - Mutating state directly (arr.push instead of [...arr, item])\n   - Missing dependencies in useEffect\n\n2. **Event Handlers**:\n   - Calling function instead of passing reference (onClick={fn()} vs onClick={fn})\n   - Missing preventDefault for forms\n   - Event object not passed correctly\n\n3. **Hooks**:\n   - Hooks called conditionally\n   - Hooks in wrong order\n   - Missing cleanup in useEffect\n\n4. **Props/Data**:\n   - Undefined props accessed without optional chaining\n   - Key prop missing or non-unique in lists\n   - Props drilling causing stale closures\n\n5. **Async**:\n   - Not handling loading/error states\n   - Race conditions in effects\n   - Promises not awaited\n\n**Diagnosis Steps**:\n1. Identify error type (runtime, logic, rendering)\n2. Trace data flow to find root cause\n3. Suggest minimal fix that addresses root cause",

  "VALIDATION_CHECKLIST": "‚úì VALIDATION:\n\n**Syntax**: Valid JSX, balanced braces, proper imports\n**Format**: Double quotes, semicolons, proper indentation\n**Packages**: Only react/react-dom imported\n**Initialization**: No ReactDOM.createRoot or root.render\n**Output**: Raw code (no markdown)\n**Single File**: Only one component/file in response",

  "STYLE_EXTRACTION_GUIDE": "üé® EXTRACT EXISTING STYLES:\n\n**Look for**:\n1. Color patterns: bg-*, text-*, border-*\n2. Theme: Dark (slate-900, gray-900) or Light (white, gray-50)\n3. Accent colors: Common colors across components\n4. Border radius: rounded-*, most common value\n5. Shadows: shadow-*, most common pattern\n6. Spacing: gap-*, p-*, most common values\n\n**Output**:\n```json\n{\n  \"theme\": \"dark\",\n  \"backgroundColor\": \"bg-slate-900\",\n  \"primaryColor\": \"cyan-400\",\n  \"cardStyle\": \"bg-slate-800/40 rounded-2xl\",\n  \"spacing\": \"gap-6\"\n}\n```",

  "MODIFICATION_GUIDE": "‚úèÔ∏è MODIFICATION PRINCIPLES:\n\n1. **Minimal Changes**: Only modify what's necessary\n2. **Preserve Existing**: Keep unrelated code unchanged\n3. **Maintain Style**: Use existing color/spacing patterns\n4. **No Refactoring**: Unless explicitly requested\n5. **Targeted**: Make surgical changes, not rewrites\n\n**Before modifying**:\n- Extract existing patterns (colors, structure, style)\n- Identify exact change location\n- Plan minimal diff",

  "COMPLETENESS_COMPRESSED": "‚úÖ COMPLETENESS:\n\n- ‚úÖ Fully functional code only\n- ‚ùå NO \"// TODO: implement\"\n- ‚ùå NO \"// Add error handling\"\n- ‚ùå NO placeholders\n\nIf you can't complete a feature, don't start it.",

  "SIMPLICITY_COMPRESSED": "üéØ SIMPLICITY:\n\n- Minimum viable changes\n- Don't overengineer\n- No complex error handling unless requested\n- Focus on the specific request"
}
